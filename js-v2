
const items = [
	{ id: 1, name: "Item 1", categories: [1, 2] },
	{ id: 2, name: "Item 2", categories: [2, 3] },
	{ id: 3, name: "Item 3", categories: [3, 4] },
	{ id: 4, name: "Item 4", categories: [4, 1] },
	{ id: 5, name: "Item 5", categories: [1, 3] },
	{ id: 6, name: "Item 6", categories: [2, 4] },
	{ id: 7, name: "Item 7", categories: [3, 1] },
	{ id: 8, name: "Item 8", categories: [4, 2] },
	{ id: 9, name: "Item 9", categories: [1, 4] },
	{ id: 10, name: "Item 10", categories: [2, 3] },
	{ id: 11, name: "Item 11", categories: [3, 4] },
	{ id: 12, name: "Item 12", categories: [4, 1] },
	{ id: 13, name: "Item 13", categories: [1, 2] },
	{ id: 14, name: "Item 14", categories: [2, 3] },
	{ id: 15, name: "Item 15", categories: [3, 4] },
	{ id: 16, name: "Item 16", categories: [4, 1] },
	{ id: 17, name: "Item 17", categories: [1, 3] },
	{ id: 18, name: "Item 18", categories: [2, 4] },
	{ id: 19, name: "Item 19", categories: [3, 1] },
	{ id: 20, name: "Item 20", categories: [4, 2] },
];

const urlParams = new URLSearchParams(window.location.search);
let currentPage = parseInt(urlParams.get("page")) || 1;
let currentTab = parseInt(urlParams.get("tab")) || 0;
function initializePage(items, itemsPerPage) {
	function updateURL() {
		const url = new URL(window.location.href);
		url.searchParams.set("page", currentPage);
		url.searchParams.set("tab", currentTab);
		window.history.replaceState({}, "", url);
	}

	function renderItems() {
		const filteredItems =
			currentTab === 0 ? items : items.filter((item) => item.categories.includes(currentTab));
		const startIndex = (currentPage - 1) * itemsPerPage;
		const paginatedItems = filteredItems.slice(startIndex, startIndex + itemsPerPage);

		const itemList = document.getElementById("item-list");
		itemList.innerHTML = paginatedItems.map((item) => `<li>${item.name}</li>`).join("");

		renderPagination(filteredItems.length, itemsPerPage);
		updateActiveTab();
	}

	function updateActiveTab() {
		document.querySelectorAll(".tab-button").forEach((button) => {
			button.classList.toggle("active", parseInt(button.getAttribute("data-tab")) === currentTab);
		});
	}

	document.querySelectorAll(".tab-button").forEach((button) => {
		button.addEventListener("click", () => {
			currentTab = parseInt(button.getAttribute("data-tab"));
			currentPage = 1;
			updateURL();
			renderItems();
		});
	});

	renderItems();
}

initializePage(items, 9);

function renderPagination(totalItems, itemsPerPage) {
	const totalPages = Math.ceil(totalItems / itemsPerPage);
	const pagination = document.getElementById("pagination");
	pagination.innerHTML = "";

	if (totalPages > 1) {
		pagination.innerHTML += getPageLink(totalPages, currentPage - 1, "Previous");
		for (let i = 1; i <= totalPages; i++) {
			pagination.innerHTML += getPageLink(totalPages, i, i, i === currentPage);
		}
		pagination.innerHTML += getPageLink(totalPages, currentPage + 1, "Next");
	}
}

function getPageLink(totalPages, pageNumber, text, isActive = false) {
	return `<a href="?page=${pageNumber}
	${currentTab > 0 ? `&tab=${currentTab}` : ""}"
	class="link ${isActive ? "active" : ""} ${
		pageNumber < 1 || pageNumber > totalPages ? "hidden" : ""
	}">${text}</a>`;
}
